<?php

$tabs = array(
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'activities' => array(
		'name' => 'Browse Activities',
		'description' => <<<'DESCR'
Browse the data hierarchy of activities.
DESCR
		,
		'mandatory_fields' => array(),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'makes' => array(
		'name' => 'Browse Fitment Makes',
		'description' => <<<'DESCR1'
Returns a list of Makes for a given activity.
Parameters:
- {ActivityID} - ID for the activity to be queried. (int)
- {ProductID} - ID used to filter fitments by product (int)
- {SkuID} - ID used to filter fitments by SKU (int)
DESCR1
		,
		'mandatory_fields' => array('ActivityID'),
		'optional_fields' => array('ProductID',  'SkuID'),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'years' => array(
		'name' => 'Browse Fitment Years',
		'description' => <<<'DESCR2'
Returns a list of Years for a given activity and make.
Parameters:
- {ActivityID} - ID for the activity to be queried. (int)
- {MakeID} - ID for the make to be queried (int)
- {ProductID} - ID used to filter fitments by product (int)
- {SkuID} - ID used to filter fitments by SKU (int)
DESCR2
		,
		'mandatory_fields' => array('ActivityID', 'MakeID'),
		'optional_fields' => array('ProductID',  'SkuID'),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'models' => array(
		'name' => 'Browse Fitment Models',
		'description' => <<<'DESCR3'
Returns a list of Models for a given activity, make, and year.
Parameters:
- {ActivityID} - ID for the activity to be queried. (int)
- {MakeID} - ID for the make to be queried (int)
- {YearID} - ID for the year to be queried (int)
- {ProductID} - ID used to filter fitments by product (int)
- {SkuID} - ID used to filter fitments by SKU (int)
DESCR3
		,
		'mandatory_fields' => array('ActivityID', 'MakeID', 'YearID'),
		'optional_fields' => array('ProductID',  'SkuID'),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'fitment' => array(
		'name' => 'Browse Fitments',
		'description' => <<<'DESCR4'
Returns fitment details.
Parameters:
- {FitmentID} - ID for the fitment to be queried. (int)
DESCR4
		,
		'mandatory_fields' => array('FitmentID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'fitmentnotes' => array(
		'name' => 'Fitment Notes',
		'description' => <<<'DESCR5'
Returns fitment notes for a given product and fitment.
Parameters:
- {productID} - The product ID. (int)
- {FitmentID} - The fitment ID. (int)
DESCR5
		,
		'mandatory_fields' => array('productID', 'FitmentID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'search' => array(
		'name' => 'Search Products',
		'description' => <<<'DESCR6'
Returns a list of products in an activity based on given criteria.
Parameters:
- {ActivityID} - Activity ID to search within (int)
- {term} - Text to search (string)
- {skip} - Number of results to skip over. Optional, defaults to zero (int)
- {take} - Number of matches to return. Optional, defaults to 20. If set to zero and
includeFacets is set to True, only Facet information will be returned (int)
- {fitmentID} - the fitment filter (int)
- {includeFacets} - specify whether facet counts are included in results (boolean)
- {brandID} - filter to specify results by brand, can be used multiple times (int)
- {categoryID} - filter to specify results by category, can be used multiple times
(int)
- {subCategoryID} - filter to specify results by subcategory, can be used multiple
times (int)
- {typeID} - filter to specify results by type, can be used multiple times (int)
- {minPrice} - minimum price filter (float)
- {maxPrice} - maximum price filter (float)
- {att_n} - Other attribute filters, where n represents an attribute ID. Can be
specified multiple times. To specify these parameters accurately, they should be
taken from Facet results.
- {sort} - specify the order of results returned, may use any of the following:
* Relevancy - sorts by relevancy based on {term}
* Rating - sort by highest rating
* priceASC - sort by price ascending
* priceDESC - sort by price descending
* nameASC - sort by name ascending
* nameDESC - sort by name descending
DESCR6
		,
		'mandatory_fields' => array('ActivityID'),
		'optional_fields' => array('term', 'skip', 'take', 'fitmentID', 'includeFacets', 'brandID',
			'categoryID',  'subCategoryID',  'typeID',  'minPrice',  'maxPrice',  'sort'),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'categories' => array(
		'name' => 'Browse Categories',
		'description' => <<<'DESCR7'
Returns a list of categories for a given activity.
Parameters:
- {ActivityID} - The ID for the activity to be queried. (integer)
DESCR7
		,
		'mandatory_fields' => array('ActivityID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'subcategories' => array(
		'name' => 'Browse SubCategories',
		'description' => <<<'DESCR8'
Returns a list of Subcategories for a given activity and category.
Parameters:
- {ActivityID} - The ID for the activity to be queried. (integer)
- {categoryID} - The ID for the category to be queried
DESCR8
		,
		'mandatory_fields' => array('ActivityID', 'categoryID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'product' => array(
		'name' => 'Product Info',
		'description' => <<<'DESCR9'
Returns information on the specified product.
Parameters:
- {ProductID} - ID for the product to be returned. (int)
Result Data - Object Array<Product>
- Brand - Brand name for this product (string)
- Description - Description for the product (string)
- HasAttributes - Returns True if this product has Attributes (boolean)
- HasFitments - Returns True if this product has associated Fitments (Boolean)
- ID - The product ID for this item (int)
- ImageURL - URL for the default image for this item
- MetaDescription - Description information for meta tags on page (string)
- MetaKeywords - Keywords for meta tags on page (string)
- Name - Name for this product (string)
DESCR9
		,
		'mandatory_fields' => array('ProductID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'productattributes' => array(
		'name' => 'Product Attributes',
		'description' => <<<'DESCR'
Returns attribute information for the specified product.
Parameters:
- {ProductID} - ID for the product to be queried. (int)
Result Data - Object Array with Results as Array<ArrayOfProductAttributeGroup>
- ID - ID for this product attribute group. (int)
- Description - Description for this attribute group. (string)
- SkuIds - Array of Sku IDs for this attribute group.
DESCR
		,
		'mandatory_fields' => array('ProductID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'skuinfo' => array(
		'name' => 'SKU information',
		'description' => <<<'DESCR'
Returns a list of SKUs for a given activity and product.
URL - /RestAPI/Skus/{activityID}/{productID}
Parameters:
- {activityID} - ID for the activity to be queried. (int)
- {productID} - ID for the product to be queried. (int)
- {fitmentID} - ID for fitment used to filter results. Optional. (int)
Result Data - Object array with Results as array<ArrayOfSku>
- ID - ID for this SKU. (int)
- Brand - Brand for this SKU. (string)
- Name - Name for this SKU. (string)
- MfgSku - The manufacturer's SKU code for this item. (string)
- MSRP - MSRP price for this item
- ImageURL - URL for the default image for this item.
DESCR
		,
		'mandatory_fields' => array('activityID', 'productID'),
		'optional_fields' => array('fitmentID'),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'skudetails' => array(
		'name' => 'SKU Detail',
		'description' => <<<'DESCR'
Returns details for a given SKU.
URL - /RestAPI/Skus/{SkuID}
Parameters:
- {SkuID} - ID for the SKU to be queried. (int)
Result Data - Object array with Results as array<ArrayOfSku>
- ID - ID for this SKU. (int)
- Brand - Brand for this SKU. (string)
- Name - Name for this SKU. (string)
- MfgSku - The manufacturer's SKU code for this item. (string)
- MSRP - MSRP price for this item
- ImageURL - URL for the default image for this item.
- Description - Description information for this SKU. (string)
DESCR
		,
		'mandatory_fields' => array('SkuID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'reviewlist' => array(
		'name' => 'Product Reviews',
		'description' => <<<'DESCR'
Returns a list of reviews for a given product.
URL - /RestAPI/Reviews/Product/{productID}
Parameters:
- {ProductID} - ID for the product to be queried. (int)
- {rating} - Used to filter by rating, where rating is scaled from 1 to 5. (int)
- {skip} - Skip the top N reviews. (int)
- {take} - Retrieve the top N reviews, value must be between 1 and 100. (int)
- {Sort} - Filters to sort returned ratings. Must be one of the following:
* ratingDESC - rating descending. (default)
* ratingASC - rating ascending
* createdASC - created time ascending
* createdDESC - created time descending
- {reviewStatus} - Filters to sort ratings by status. Must be one of the following:
* Approved - retrieve only Approved reviews
* Pending - retrieve only Pending reviews
* Rejected - retrieve only Rejected reviews
DESCR
		,
		'mandatory_fields' => array('productID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	'reviewsummary' => array(
		'name' => 'Review Summaries',
		'description' => <<<'DESCR'
Returns a review summary for a given product.
URL - /RestAPI/Reviews/Summary/{productID}
Parameters:
- {productID} - The product ID. (int)
Result Data - Object array with Results as array<ArrayOfReviewSummary>
- Total - Total number of reviews for this product. (int)
- None - Number of zero-star reviews for this product (int)
- OneStar - Number of one-star reviews for this product (int)
- TwoStar - Number of two-star reviews for this product (int)
- ThreeStar - Number of three-star reviews for this product (int)
- FourStar - Number of four-star reviews for this product (int)
- FiveStar - Number of five-star reviews for this product (int)
- AverageRating - Average rating for this product (int)
DESCR
		,
		'mandatory_fields' => array('productID'),
		'optional_fields' => array(),
	),
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



/*









// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEW API

	'NodeChildren' => array(
		'name' => 'Node Children',
		'description' => <<<'DESCR'
Returns the organizational data of the catalog.
URL - /RestAPI/NodeChildren/{brandCode}/{parentId}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {parentId} - ID of parent Node. (Int). Top-level ID is -1.
Result Data - Object List NodeChildren
- IsParent is an important field as it notes the end of organizational data and the beginning of Assembly Data. To retrieve Assembly data for nodes where IsParent is False, use the AssemblyInfo call.
- ID - ID of this result node
- ParentID - ID of parent node
- ParentName - Name of parent node
DESCR
		,
		'mandatory_fields' => array('brandCode', 'parentId'),
		'optional_fields' => array(),
	),

	'SearchModelAssemblies' => array(
		'name' => 'Search Model Assemblies',
		'description' => <<<'DESCR'
Returns a list of assemblies that belong to a matching model.
URL - /RestAPI/SearchModelAssemblies/{brandCode}/{modelId}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {modelId} - Model ID to look up children assemblies.
Result Data - Object List<NodeChildren>
- Use Id and ParentId to get assembly information by calling AssemblyInfo.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'modelId'),
		'optional_fields' => array(),
	),

	'ModelAutoComplete' => array(
		'name' => 'Model Auto Complete',
		'description' => <<<'DESCR'
Searches for matching model names by a wildcard match for the purpose of providing search suggestions.
URL - /RestAPI/ModelAutoComplete/{brandCode}/{modelName}/{numberOfResults}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {modelName} - Model name search text. (string)
- {numberOfResults} - Number of matches to return. Optional, defaults to 10. Max value of 25. (int)
Result Data - Object List <ModelAutoComplete>
DESCR
		,
		'mandatory_fields' => array('brandCode', 'modelName'),
		'optional_fields' => array('numberOfResults'),
	),

	'SearchModel' => array(
		'name' => 'Search Model',
		'description' => <<<'DESCR'
Searches for all matching models by a wildcard match against a given model name.
URL - /RestAPI/SearchModel/{brandCode}/{model}/{page}/{pageSize}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {model} - Model name to match for. (string)
- {page} - Page number to return. Optional, defaults to 1. (int)
- {pageSize} - Number of matches to return per page. Optional, defaults to 50. (int)
Result Data - Object SearchResult with Results as List <SearchModel>
- ModelId - Use the model id to retrieve assemblies by calling SearchModelAssemblies.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'model'),
		'optional_fields' => array('page', 'pageSize'),
	),

	'SearchPartModels' => array(
		'name' => 'Search Part Models',
		'description' => <<<'DESCR'
Returns a list of models that a given part is found in.
URL - /RestAPI/SearchPartModels/{brandCode}/{sku}/{page}/{pageSize}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {Sku} - Part sku to find models for.
- {page} - Page number to return. Optional, defaults to 1. (int)
- {pageSize} - Number of matches to return per page. Optional, defaults to 100.
(int)
Result Data - Object SearchResult with Results as List<SearchModel>
- ModelId - Use the model id to retrieve assemblies that the matching part is a part of by calling SearchPartModelAssemblies.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'sku'),
		'optional_fields' => array('page', 'pageSize'),
	),

	'PartAutoComplete' => array(
		'name' => 'Part Auto Complete',
		'description' => <<<'DESCR'
Searches for matching part sku by a wildcard match for the purpose of providing search suggestions.
URL - /RestAPI/PartAutoComplete/{brandCode}/{partSku}/{numberOfResults}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {partSku} - Part name search text. (string)
- {numberOfResults} - Number of matches to return. Optional, defaults to 10. Max value of 25. (int)
Result Data - Object List <PartAutoComplete>
DESCR
		,
		'mandatory_fields' => array('brandCode', 'partSku'),
		'optional_fields' => array('numberOfResults'),
	),

	'SearchParts' => array(
		'name' => 'Search Parts',
		'description' => <<<'DESCR'
Searches for all matching parts by a wildcard match against a part sku or description.
URL - /RestAPI/SearchParts/{brandCode}/{search}/{page}/{pageSize}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {search} - Text to search for. (string)
- {page} - Page number to return. Optional, defaults to 1. (int)
- {pageSize} - Number of matches to return per page. Optional defaults to 50. (int)
Result Data - Object SearchResult with Results as List SearchPart
- HasModels - If true, call SearchPartModels to get the models that contain a matching part.
- IsSuperseded - If true, call PartInfo to get newer part information.
- NLA - Stands for No Longer Available.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'search'),
		'optional_fields' => array('page', 'pageSize'),
	),

	'SearchPartsWithinModel' => array(
		'name' => 'Search Parts Within Models',
		'description' => <<<'DESCR'
Searches for all the matching parts by a wildcard match against a part sku or description that also belong to matching models also found by a wildcard match.
URL - /RestAPI/SearchPartsWithinModel/{brandCode}/{modelSearch}/{partSearch}/{page}/{pageSize}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {modelSearch} - Text to search for matching models. (string)
- {partSearch} - Text to search for matching parts within matching models. (string)
- {page} - Page number to return. Optional, defaults to 1. (int)
- {pageSize} - Number of matches to return per page. Optional defaults to 50. (int)
Result Data - Object SearchResult with Results as List SearchPart
- HasModels - If true, call SearchPartModelsFiltered to get the models that contain the matching part and match model search text.
- IsSuperseded - If true, call PartInfo to get newer part information.
- NLA - Stands for No Longer Available.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'modelSearch', 'partSearch'),
		'optional_fields' => array('page', 'pageSize'),
	),

	'SearchPartModelsFiltered' => array(
		'name' => 'Search Part Models Filtered',
		'description' => <<<'DESCR'
Returns a list of models that a given part is found in that also match the model search text.
URL - /RestAPI/SearchPartModelsFiltered/{brandCode}/{sku}/{modelName}/{page}/{pageSize}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {sku} - Part sku to find models for.
- {modelName} - Model search text to find matching models against.
- {page} - Page number to return. Optional, defaults to 1. (int)
- {pageSize} - Number of matches to return per page. Optional, defaults to 100. (int)
Result Data - Object SearchResult with Results as List SearchModel
- ModelId - Use model id to retrieve assemblies that a matching part is a part of by calling SearchPartModelAssemblies.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'sku', 'modelName'),
		'optional_fields' => array('page', 'pageSize'),
	),

	'SearchPartModelAssemblies' => array(
		'name' => 'Search Part Model Assemblies',
		'description' => <<<'DESCR'
Returns a list of assemblies that belong to a matching model and that contain the matching part.
URL - /RestAPI/SearchPartModelAssemblies/{brandCode}/{modelId}/{sku}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {modelId} - Model ID used to find children assemblies.
- {sku} - Part Sku to filter assemblies to only ones that contain the specified part.
Result Data - Object List<NodeChildren>
- Use Id and ParentId to get assembly information by calling AssemblyInfo.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'modelId', 'sku'),
		'optional_fields' => array(),
	),

	'AssemblyInfo' => array(
		'name' => 'Assembly Info',
		'description' => <<<'DESCR'
Returns the image, hotspots, and part list for a given assembly.
URL - /RestAPI/AssemblyInfo/{brandCode}/{parentId}/{assemblyId}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {parentId} - ID of the parent node of the assembly. (int)
- {assemblyId} - ID of the assembly. (int)
Result Data - Object AssemblyInfo
- AssemblyId - The ID for this assembly
- Name - The assembly name
- ParentId - ID for the parent node
- ParentName - Name for parent node
- ImageURL - To access an image, you must pass the requesting page URL in the Query String as ariv. To change zoom levels, modify ariz. Valid zoom levels are -1 to 5.
- HotSpots - List of hotspots and locations, calculated off of the default zoom level of 1.
- Parts - List of parts associated with this assembly.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'parentId', 'assemblyId'),
		'optional_fields' => array(),
	),

	'AssemblyInfoNoHotSpot' => array(
		'name' => 'Assembly Info No Hotspots',
		'description' => <<<'DESCR'
Returns the image and part list for a given assembly. No hotspot data is returned.
URL - /RestAPI/AssemblyInfoNoHotSpot/{brandCode}/{parentId}/{assemblyId}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {parentId} - ID of the parent node of the assembly. (int)
- {assemblyId} - ID of the assembly. (int)
Result Data - Object AssemblyInfo
- NLA - Stands for No Longer Available.
- ImageURL - To access the image, you must pass the requesting page URL in the Query String as ariv. To change zoom levels, modify ariz. Valid zoom levels are - 1 to 5.
- IsSuperseded - If true, the original part data is prefixed by Org.
- HotSpots - Value is null.
DESCR
		,
		'mandatory_fields' => array('brandCode', 'parentId', 'assemblyId'),
		'optional_fields' => array(),
	),

	'AssemblyImage' => array(
		'name' => 'Assembly Image',
		'description' => <<<'DESCR'
Returns the image for a given assembly.
URL - /RestAPI/AssemblyImage/{brandCode}/{parentId}/{assemblyId}/{width}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {parentId} - ID of the parent node of the assembly. (int)
- {assemblyId} - ID of the assembly. (int)
- {width} - Desired width of the image. (int)
Result Data - GIF image
- Content-type: Image/GIF
DESCR
		,
		'mandatory_fields' => array('brandCode', 'parentId', 'assemblyId', 'width'),
		'optional_fields' => array(),
	),

	'hotspots' => array(
		'name' => 'Hotspots',
		'description' => <<<'DESCR'
Returns hotspot data for a given assembly image at specified zoom level.
URL - /RestAPI/Hotspots/{brandCode}/{assemblyId}/{zoomLevel}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {assemblyId} - Assembly Id for assembly that the hotspots are for.
- {zoomLevel} - Desired zoom level of image hotspots.
Result Data - Object List HotSpot
- Tag - Matches part tag.
- TopLeft - The top-left point relative to the image dimensions by x y coordinates.
- BottomRight - The bottom-right point relative to the image dimensions by x y coordinates.
DESCR
		,
		'mandatory_fields' => array('brandCode', ''),
		'optional_fields' => array(),
	),

	'partinfo' => array(
		'name' => 'Part Info',
		'description' => <<<'DESCR'
Returns part data for an individual part.
URL - /RestAPI/PartInfo/{brandCode}/{partId}
Parameters:
- {brandCode} - Brand Code for the catalog to be queried. (string)
- {partId} - ID for the Part. (int)
Result Data - Object Part
- NLA - Stands for No Longer Available.
- ImageURL - Url for this part's image. May be null. Only available for select catalogs.
- IsSuperseded - If true, the original part data is prefixed by Org.
- Description - Part description
- MSRP - MSRP for this part
- OrgDescription - If there is a prior part, the prior part's description
- OrgSKU - If there is a prior part, the prior part's SKU
- SKU - SKU / part number for this part
- SortTag - Sort order for this part on its associated assembly
- Tag - Reference tag for this part
DESCR
		,
		'mandatory_fields' => array('brandCode', 'partId'),
		'optional_fields' => array(),
	),

	'brands' => array(
		'name' => 'Brand List',
		'description' => <<<'DESCR'
Not sure how this can be retrieved, but it seems the brand list is static and predefined, so here're the values:
BRP		Can-Am (Bombardier)
HOM		Honda
HONPE		Honda Power Equipment
KUS		Kawasaki
POL		Polaris
BRP_SEA		Sea-Doo
SUZ		Suzuki Motor of America, Inc
VIC		Victory
YAM		Yamaha
DESCR
		,
		'mandatory_fields' => array(),
		'optional_fields' => array(),
	),

//	'' => array(
//		'name' => '',
//		'description' => <<<'DESCR'
//
//DESCR
//		,
//		'mandatory_fields' => array('brandCode', ''),
//		'optional_fields' => array(),
//	),


/**/

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
);

?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>ARI API checker</title>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
	</head>
<body>

<style>
	* {
		margin: 0;
		padding: 0;
		font-family: Arial,Helvetica,sans-serif;
		font-size: 14px;
	}
	ul, ol {
		list-style: outside none none;
	}
	button {}

	.clearer::after {
		clear: both;
		font-size: 0;
		height: 0;
		line-height: 0;
		text-indent: -10000px;
		content: '.';
	}

	h1 {
		margin: 20px 40px;
		font-size: 20px;
	}
	.check-container {
		margin: 20px;
		overflow: auto;
		border: 1px solid #aaa;
	}
	.tabs {
		float: left;
		width: 300px;
	}
	.tabs ul {
		margin: 20px;
		padding: 0;
		border-top: 1px solid #aaa;
	}
	.tabs li {
		padding: 10px;
		border-bottom: 1px solid #aaa;
		cursor: pointer;
	}
	.tabs li.active {
		background-color: lightgrey;
		font-weight: bold;
	}
	.content {
		float: left;
		width: 700px;
	}
	.content > ul {
		margin: 20px;
	}
	.content > ul > li {
		display: none
	}
	.content > ul > li.active {
		display: block;
	}
	.content h2 {
		border-bottom: 1px solid #aaa;
		font-size: 16px;
		margin: 20px 0;
		padding: 10px 0;
	}
	.description {
		line-height: 22px;
	}
	.field-list {
		margin: 20px 0;
	}
	.field-list li {
		margin: 10px 0;
	}
	.mandatory {}
	.optional {}
	.field-list label {
		display: inline-block;
		min-width: 140px;
		vertical-align: middle;
	}
	.field-list input {
		width: 250px;
		padding: 3px 10px;
	}
	.content .buttons {
		margin: 40px 20px 20px;
		padding: 20px 0;
		border-top: 1px solid #aaa;
	}
	.buttons button {
		padding: 10px 20px;
		border: 1px solid darkgrey;
		background: lightgrey;
		font-size: 14px;
		font-weight: bold;
		text-transform: uppercase;
		cursor: pointer;
	}
	#results {
		margin: 20px;
		padding: 20px 0;
		font-size: 20px;
		line-height: 20px;
		color: red;
		text-align: center;
	}
	.fitment-time {
		margin: 20px 0;
		font-size: 14px;
		text-align: left;
		color: #000;
	}
</style>

<h1>ARI API Checker</h1>
<div class="clearer check-container">
	<div class="tabs">
		<ul>
			<?php foreach($tabs as $tabid => $tab): ?>
				<li id="<?php echo $tabid ?>"><?php echo htmlspecialchars($tab['name']) ?></li>
			<?php endforeach ?>
		</ul>
	</div>
	<div class="content">
		<ul>
			<?php foreach($tabs as $tabid => $tab): ?>
				<li id="<?php echo $tabid ?>_content" class="tab-content">
					<h2>Description</h2>
					<p class="description"><?php echo nl2br(htmlspecialchars($tab['description'])) ?></p>

					<h2>Mandatory fields</h2>
					<ul class="mandatory field-list">
						<?php if(count($tab['mandatory_fields'])): ?>
							<?php foreach($tab['mandatory_fields'] as $fieldName): ?>
								<li>
									<label for="<?php echo $tabid.'_'.$fieldName ?>"><?php echo $fieldName ?></label>
									<input id="<?php echo $tabid.'_'.$fieldName ?>" name="<?php echo $fieldName ?>" value="<?php echo isset($params[$fieldName]) ? htmlspecialchars($params[$fieldName]) : '' ?>"/>
								</li>
							<?php endforeach ?>
						<?php else: ?>
							<li>This request doesn't have mandatory parameters</li>
						<?php endif ?>
					</ul>

					<h2>Optional fields</h2>
					<ul class="optional field-list">
						<?php if(count($tab['optional_fields'])): ?>
							<?php foreach($tab['optional_fields'] as $fieldName): ?>
								<li>
									<label for="<?php echo $tabid.'_'.$fieldName ?>"><?php echo $fieldName ?></label>
									<input id="<?php echo $tabid.'_'.$fieldName ?>" name="<?php echo $fieldName ?>" value="<?php echo isset($params[$fieldName]) ? htmlspecialchars($params[$fieldName]) : '' ?>"/>
								</li>
							<?php endforeach ?>
						<?php else: ?>
							<li>This request doesn't have optional parameters</li>
						<?php endif ?>
					</ul>
				</li>
			<?php endforeach ?>
		</ul>
		<div class="buttons">
			<button type="button" onclick="sendRequest()">Send</button>
		</div>
	</div>
</div>

<div id="results"></div>

<script type="text/javascript">

	var ari_checker_time = null;

	function getTime() {
		var d = new Date();
		return (d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds())*1000 + d.getMilliseconds();
	}

	function gatherParams(selector) {
		var arr = jQuery('.content .tab-content.active .' + selector + ' input').serializeArray();
		result = {};
		for(var i=0; i<arr.length; i++) {
			result[arr[i].name] = arr[i].value;
		}
		return result;
	};

	function sendRequest() {
		document.getElementById('results').innerHTML = 'Sending a request, please wait...';
		ari_checker_time = getTime();
		jQuery.ajax({
<?php if($this->getRequest()->getParam('direct')): ?>
			url: "<?php echo $this->getUrl() ?>ariapi/index.php".replace('http:', document.location.protocol),
<?php else: ?>
			url: "<?php echo $this->getUrl('fitment/check/post') ?>".replace('http:', document.location.protocol),
<?php endif ?>
			data: {
				requestType: jQuery('.tabs .active')[0].id,
				params: gatherParams('mandatory'),
				options: gatherParams('optional')
			},
			dataType: 'json',
			type: 'post',
			cache: false,
			success: function(response) {
				var d = new Date();
				ari_checker_time = getTime() - ari_checker_time;
				html = '<p class="fitment-time">Total request time=' + ari_checker_time + 'ms, ARI request time='+ response.time + 's</p>' + response.dump;
				document.getElementById('results').innerHTML = html;
			}
		});
	};

//	these are taken from Vic class as they're not getting ran being pulled with AJAX
	lightOn = function(element){
		element.parentNode.style.backgroundColor = "silver";
		return false;
	};
	lightOff = function(element){
		element.parentNode.style.backgroundColor = "transparent";
		return false;
	};
	collapseToggle=function(element){
		if(element.parentNode.collapsed) {
			element.parentNode.classList.remove("collapsed");
			element.parentNode.collapsed = 0;
		} else {
			element.parentNode.classList.add("collapsed");
			element.parentNode.collapsed = 1;
		}
		return false;
	};

	jQuery(document).ready(function() {
		jQuery('.tabs ul li:first-child').addClass('active');
		jQuery('.content > ul li:first-child').addClass('active');

		jQuery('.tabs li').click(function(event){
			jQuery('.tabs li').removeClass('active');
			jQuery(event.target).addClass('active');
			jQuery('.tab-content').removeClass('active');
			jQuery('#' + event.target.id + '_content').addClass('active');
		});
	});

</script>

</body>
</html>
